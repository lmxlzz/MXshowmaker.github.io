<search>
    
     <entry>
        <title>Gather Scatter的使用</title>
        <url>/post/2021/10/gather%E4%B8%8Escatter%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>pytorch</tag>
        </tags>
        <content type="html"> gather-scatter 的使用 scatter 在pytorch中，scatter是一个非常实用的映射函数，其将一个源张量（source）中的值按照指定的轴方向（dim）和对应的位置关系（index）逐个填充到目标张量（target）中。
target.scatter(dim, index, src) 这里用CSDN里面的一个形象的例子来简要说明。 (dim=0)
- **将source的值按照index散到target上。** - target是待填充的tensor。 - index tensor 在各个维度的长度都应该要小于 source tensor。   遍历source tensor中的每个值（index覆盖的区域），在index tensor对应的位置，寻找索引号。根据index tensor中索引号填入target的对应位置。  例如，source00的值，寻找对应索引为index00=1，即将source00填入target10的位置。  source10的值，对应索引为index10=2，将source10=5填入target20的位置。      应用：
在深度学习制作标签的时候，可以给全零矩阵的某些行或者列赋值为1，从而制作one-hot matrix。
tar = torch.zeros(10, 10) src = torch.ones(1, 10) index = 从数据集中获取, size=(1,10)，表示10个数据每个的标签| torch.LongTensor类型 tar_ = tar.scatter(dim=1, index=index, src=src) # 根据index将1填入每行中 gather 函数torch.gather(input, dim, index, out=None) → Tensor 沿给定轴 dim ,将输入索引张量 index 指定位置的值进行聚合。
对一个 3 维张量,输出可以定义为:
out[i][j][k] = input[index[i][j][k]][j][k] # if dim == 0 out[i][j][k] = input[i][index[i][j][k]][k] # if dim == 1 out[i][j][k] = input[i][j][index[i][j][k]] # if dim == 2 简单的说，就是根据index将input按照dim从中选择某些位置进行聚合。
例子：
import torch a = torch.randint(0, 30, (2, 3, 5)) print(a) &amp;#39;&amp;#39;&amp;#39; tensor([[[ 18., 5., 7., 1., 1.], [ 3., 26., 9., 7., 9.], [ 10., 28., 22., 27., 0.]], [[ 26., 10., 20., 29., 18.], [ 5., 24., 26., 21., 3.], [ 10., 29., 10., 0., 22.]]]) &amp;#39;&amp;#39;&amp;#39; index = torch.LongTensor([[[0,1,2,0,2], [0,0,0,0,0], [1,1,1,1,1]], [[1,2,2,2,2], [0,0,0,0,0], [2,2,2,2,2]]]) print(a.size()==index.size()) b = torch.gather(a, 1,index) print(b) &amp;#39;&amp;#39;&amp;#39; True tensor([[[ 18., 26., 22., 1., 0.], [ 18., 5., 7., 1., 1.], [ 3., 26., 9., 7., 9.]], [[ 5., 29., 10., 0., 22.], [ 26., 10., 20., 29., 18.], [ 10., 29., 10., 0., 22.]]]) 可以看到沿着dim=1，也就是列的时候。输出tensor第一页内容， 第一行分别是 按照index指定的， input tensor的第一页 第一列的下标为0的元素 第二列的下标为1元素 第三列的下标为2的元素，第四列下标为0元素，第五列下标为2元素 index--&amp;gt;0,1,2,0,2 output--&amp;gt; 18., 26., 22., 1., 0. &amp;#39;&amp;#39;&amp;#39;  输出的size与index的size是一样的  应用：
​	可以对input tensor根据给定维度，按照index进行重新排序。
​	- 这里用dim=0做一个例子，在0维上进行重新排序
input = torch.randn(10,10) index = # torch.LongTensor| size=(10， 10)| index 按照列，将原来input里面的每一列换了一个顺序，通常在深度学习中，这个顺序是max或min re_sort = torch.gather(input=input, dim=0, index=index) torch.where函数的使用   根据条件，返回从x,y中选择元素所组成的张量。如果满足条件，则返回x中元素。若不满足，返回y中元素。
  element-wise
  torch.where(condition, x, y) -&amp;gt; Tensor 判断 inf 与 nan 在深度学习的研究过程中，出现 inf与nan是不少见的情况。这个时候，需要判断出现的地方以及进行处理。
判断：
- torch.isnan() - torch.isinf()  处理：
注意：这张图有点小问题，inf替换为1的话，torch.full_like里面应该改成torch.full_like(a, 1)
Reference 【Pytorch】scatter函数详解
pytorch中gather函数的理解
pytorch torch.where用法
pytorch处理inf和nan数值
</content>
    </entry>
    
     <entry>
        <title>SSH远程</title>
        <url>/post/2021/07/ssh%E8%BF%9C%E7%A8%8B/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>ssh</tag>
        </tags>
        <content type="html"> SSH 远程  目标：跳板机是win10，目标机器是Linux。 win10由于在所里，无法直接访问，这里找实验室的师兄帮忙做了一个端口映射，可以从外网访问某个端口，从而直接转发到win10跳板机上。（这个跳板机是我个人的主机）  想要从外网访问内网的服务器，中间经过跳板机，外网接口的端口5000映射为跳板机的端口22。
win10 如何做跳板机 参考Win10 安装 OpenSSH 并搭建服务器。
先到github的这个链接上下载OpenSSH server的zip文件。
  将下载的zip文件解压到 C:\Program Files\OpenSSH
  用管理员权限打开 PowerShell，进入安装目录，运行：
powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1   为ssh设置防火墙，运行：
netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22   开启 ssh 服务并且设置开机启动以及相关的防火墙：
  Start-Service sshd # OPTIONAL but recommended: Set-Service -Name sshd -StartupType &amp;#39;Automatic&amp;#39; # Confirm the Firewall rule is configured. It should be created automatically by setup. Get-NetFirewallRule -Name *ssh* # There should be a firewall rule named &amp;#34;OpenSSH-Server-In-TCP&amp;#34;, which should be enabled # If the firewall does not exist, create one New-NetFirewallRule -Name sshd -DisplayName &amp;#39;OpenSSH Server (sshd)&amp;#39; -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 这里可以把远程的shell从Command换成git的bash，找到bash.exe的位置即可。
New-ItemProperty -Path &amp;#34;HKLM:\SOFTWARE\OpenSSH&amp;#34; -Name DefaultShell -Value &amp;#34;C:\Program Files\Git\bin\bash.exe&amp;#34; -PropertyType String -Force SSH 通过跳板机直接访问内网机器 内网服务器地址：2.2.2.2
外网访问地址：1.1.1.1:5000
参考ssh 隧道应用&amp;amp;代理。
这里使用SSH中的 ProxyCommand
在./ssh/config文件中添加：
Host IctJumpMachine HostName 1.1.1.1 User xxxx Port 50000 Host Jumpxxx HostName 2.2.2.2 User user ProxyCommand ssh -W %h:%p IctJumpMachine 注意: ProxyCommand 的位置前往要注意，是在内网机器中添加 ProxyCommand，而不是在跳板机中添加ProxyCommand。
原理就是连接ssh Jumpxxx 之前，先ssh 到 IctJumpMachine 。然后通过这个连接再ssh Jumpxxx。
关于vscode上的配置，参考VSCode Remote ssh跳板机配置（windows平台）。
Reference  Win10 安装 OpenSSH 并搭建服务器 VSCode Remote ssh跳板机配置（windows平台） ssh 隧道应用&amp;amp;代理  </content>
    </entry>
    
     <entry>
        <title>Intro2python_part4</title>
        <url>/post/2021/07/intro2python_part4/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>python</tag>
        </tags>
        <content type="html"> 捕获异常 try: pass except 错误类型1： pass except (错误类型2， 错误类型3)： pass except Exception as result: print(&amp;#39;未知错误 %s&amp;#39; %(result, )) else: # 没有异常才会被执行。 pass finally: # 不管对错，对会被执行。 pass 主动抛出异常 raise def input_pwd(): pwd = input(&amp;#39;请输入密码： &amp;#39;) if len(pwd) &amp;gt;= 8: return pwd ex = Exception(&amp;#39;密码长度小于8&amp;#39;) raise ex if __name__ ==&amp;#39;__main__&amp;#39;: try: print(input_pwd()) except Exception as result: print(&amp;#39;输入异常&amp;#39;) 模块 模块提供的工具有：
- 全局变量 - 函数 - 类  模块导入  文件被导入时，能够被直接执行的代码不需要被执行！ 在导入文件时，文件中所有没有锁紧的代码都会被执行一遍！  使用 __name__属性
  如果文件直接被执行，__name__ 永远是 __main__。
  如果文件是被导入的，__name__ 是 文件名。
  文件中的测试代码，为了避免在导入的时候被执行，可以使用:
  def main(): # test pass if __name__ == &amp;#39;__main__&amp;#39;: main()     包(package)   每个包是一个direcotry
  必须要在directory下面创建 __init__.py
  在__init__.py中将可以对外提供的工具列出来。
  # __init__.py # 从 当前目录 导入 模块列表 from . import module1 from . import module2     发布 包 三个步骤：
- 在包外面创建 `setup.py`   构建模块：python setup.py build  会生成build目录   发布模块：python setup.py sdist  会生成dist目录  内部包含 xxxx.tar.gz文件      setup.py
from distutils.core import setup setup(name=&amp;#39;xxx&amp;#39;, version=&amp;#39;1.0&amp;#39;, ..., py_module=[&amp;#39;包名.模块名&amp;#39;， &amp;#39;包名.模块名&amp;#39;]) 安装模块 tar -zxvf xxxxx.tar.gz sudo python setup.py install 想要卸载的话，就把安装模块在系统目录内删掉。
package位置的区别：
如果是系统自带的python，会使用dist-packages目录；
如果你手动安装python，它会直接使用目录site-packages。
这允许你让两个安装隔离开来。
dist-packages：系统自带的python
site-packages：自己安装的python
eval() # 可以直接执行str的内容，但是很危险。# 例如，可以通过下面的str把文件给删除了！__import__(&amp;#39;os&amp;#39;).system(&amp;#39;rm xxx&amp;#39;) vim 从vi发展过来的一个文本编辑器。支持补全、编译、跳转。
 打开&#43;跳转到指定行数  vim 文件 &#43; 行数  三种模式  命令模式 行末模式 编辑模式    学习路线  重复次数： 数字&#43;命令 移动和选择 编辑操作  删除、复制、粘贴、替换、缩排   撤销和重复 查找替换 编辑  移动选择   句子内移动
 w 向下移动一个单词 &amp;lsquo;b&amp;rsquo; 向上移动一个单词    行数移动
 gg (go) 移动到第一行 G 移动到最后一行 100gg 移动到第100行    段落移动
 { } 括号切换 %    mark标记
  mx x是a-z, A-Z的任意一个字母
  跳转的时候输入&#39;x，x为对应的字母
    可视模式  v：可视模式 V：可视行模式 ctrl&#43;v：可视块模式，垂直方向选择文本  撤销和恢复  u，undo； ctrl&#43;r ，redo；  删除文本  x：cut，剪切 d(移动命令)：删除, dw, d2j(删除下面两行), d6G(删除到第六行)  dw d0，删除到行首 d} ndd：向下连续删除 n 行 d代码行G d&#39;a   &amp;lsquo;dd&amp;rsquo;：删除行 &amp;lsquo;D&amp;rsquo;：删除到行末尾  复制命令  y(移动命令)，后面的内容与d(移动命令)一致。 y表示复制 yy, nyy; 复制一行或者多行 p 粘贴; 如果是多行，则在光标下一行开始粘贴；如果不是一整行，就在光标位置粘贴。  5p粘贴5次    注意： vi中删除、剪切是把文本挪动到文本缓冲区中，类似于ctrl&#43;x。 同时，vi不使用系统剪切板。
即，其他软件中剪切的内容是无法通过p被复制到vi编辑的文本中。
与系统剪切板进行复制粘贴   复制： 将y修改成&amp;quot;&#43;y
  粘贴： 将p修改成&amp;quot;&#43;p
  替换  r：替换当前光标 R：替换当前光标后所有内容  缩进以及重复执行 normal 模式下：
 &amp;gt;&amp;gt;, 2&amp;gt;&amp;gt;表示接下当前行和下一行都向右缩进 &amp;lt;&amp;lt;  在visual 模式下，：
 &amp;gt; &amp;lt;  重复：
 .，即可重复执行上一次的命令。  查找   \str，查找之后使用next查询下一个位置
 n：查询下一个 N：查询上一个    单词快速匹配，光标在某个单词上，输入如下指令：
 *：向下查找 #：向上查找    查找并替换   格式比较固定： :%s///g
  全局替换：
 :%s/旧文本/新文本/g    可视区域范围替换：在可视模式下选择范围。但是没有%
 :s/旧文本/新文本/g    确认替换：在替换的时候会有提示。 y/n/a/q/l/^E/^Y. 是/否/全部/退出/跳转到最后一个/下滚屏/上滚屏
 :%s/旧文本/新文本/gc    插入命令  i：当前字符前插入 I：当前行首插入 a：当前字符后插入 A：当前行尾插入 o：当前行下一行插入一空行 O：当前行上一行插入一空行  编辑命令和数字连用 重复10个 *
  先在normal模式下输入 10
  进入编辑模式输入 *
  退回到normal即可完成动作的重复操作。
  注意：在正常开发的情况下，进入编辑模式之前千万不要按数字。
分屏命令 末行拓展命令:
 :e . 使用vim的内置浏览器查看文件目录下的文件 :e xxx 打开 xxx 文件 :n xxx 新建 xxx 文件 :w xxx 另存为 xxx 文件  分屏命令:
 :sp 横向分屏 :vsp 纵向分屏  切换分屏： ctrl&#43;w
 w 切换窗口 r互换窗口 c关闭当前窗口，如果是最后一个窗口，则不起作用。 q退出当前窗口，如果是最后一个，则退出vim o关闭其他窗口  </content>
    </entry>
    
     <entry>
        <title>Intro2python_part3</title>
        <url>/post/2021/07/intro2python_part3/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>python</tag>
        </tags>
        <content type="html"> 类与print print 类的对象变量，默认情况下是输出这个变量 **引用的对象 **是 由哪一个类创建的对象。
以及在内存中的地址（16进制）
类的声明 Tom = Cat() # 这里系统做了两件事情： # 1. 在内存中为Tom申请了一块空间 # 2. 执行 Cat 的 __init__函数 内置函数：  __str__ __del__  一行过长分行小技巧 在前后加上( )。
python能够自动的将小括号中的内容拼接起来。
身份运算符 is 等价于 id(xx) == id(xx); 比较内存地址是否一致
is not
注意：is比较变量的id，==比较变量的值
私有属性&amp;amp;方法 在名称前加两个下划线 ，无法直接被方法。
但是python中这是一种伪私有。
可以通过_类名__私有变量， _类名__私有方法来访问。
super的使用 彻底搞懂python super函数的作用
super()
继承 子类对象不能在自己的方法内部，直接访问父类的私有方法和私有属性。
method resolution order   方法搜索顺序 MRO
  这是类的一个内置属性。__mro__
  多继承中，如果多个父类有相同的方法，尽量避免多继承的使用。
  object 所有类的祖宗类。
class 类名(object): pass # object 封装了一些内置属性。推荐使用继承object。 # python3 中没有指定object的话，默认使用继承object。 类是一个特殊的对象  区别于实例对象 类对象具有：  类方法 类属性    类方法 @classmethod def 类方法(cls): pass 静态方法  不需要 实例属性 不需要 类属性  @staticmethod def 静态方法(): pass 单例设计模式  目的：让 类 创建的对象在系统中只有唯一的一个实例。 每一次执行 类名() 返回的对象，内存地址是相同的。  a=类名()，完成两件事情：
 __new___ 分配空间 __init__ 初始化  设置一个类属性初始化为 instance = None
cls.instance 记录第一个被创建对象的引用。
cls.instance is None 来实现唯一。
</content>
    </entry>
    
     <entry>
        <title>Intro2python_part2</title>
        <url>/post/2021/07/intro2python_part2/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>python</tag>
        </tags>
        <content type="html"> pyc文件  python compiled  不需要每次运行的时候重新翻译   缓存文件 二进制 称为字节码  del  本质上上将变量从内存中删除  list &amp;amp; tuple   list
 通常保存相同类型数据    tuple
  通常保存不同数据
  格式字符串，()本质上就是元祖。
 &amp;lsquo;%f&amp;rsquo; %(number, ) 注意这里的逗号，不可省略。      dict  更新： update  dict_a.updata(dict_b) 如果dict_b里面包含dict_a的key，那么dict_a里的key的值会被覆盖。   循环  for k in dict: 这里的k会得到keys    字符串  strip  去除空白字符  &amp;ldquo;\r\n\t&amp;rdquo; space      完整for循环 for xxx in xxxx: ... else: 只有循环被完全执行完（没有break）的情况下，else会在循环结束的时候执行。 在搜索的时候，如果循环一遍之后没有找到搜索目标，希望在搜索结束的时候有一个统一的输入提示，那么就使用for-else结构。
shebang #!
#! /usr/bin/python3 # 【#!】表示 shebang符号 # 加入解释器的绝对路径，使用chmod &#43; x， 添加可执行权限，就可以在命令行中输入 ./xx.py 来执行。 变量进阶  数据：保存在内存中的一个位置 变量：保存数据在内存中的地址  变量中记录数据的地址，叫做引用 id()可以查看变量保存的地址。即，数据对应的地址。    可变与不可变类型  不可变：  int long float str tuple   可变：  list dict 这里是指，可以通过method调用，在不修改地址的情况下修改类型中的值。    a = [1, 2, 3] a = [1, 1, 1] # 这里是改变a的引用，而不是修改[1, 2, 3]中的值。 # 赋值语句会修改变量的id 注意：字典的key必须是不可变的类型。
全局变量的修改 在函数中修改全局变量需要在变量赋值前加 global这个限定符
num = 10 def func(): num = 99 # 创建局部变量 # global num # num = 98 # 修改全局变量 函数进阶 函数返回值   多个返回值 return a, b, c 这是一个元组
  拓展，交换两数
  a, b = (b, a) a, b = b, a # 可以省略括号     多值参数   一个函数能处理的参数 个数不确定
  两种类型
  *args
  接受 tuple
  调用的时候不需要指定元组
  def func(*args): xxx func(1,2,3,4)      **kwargs
 接受 dict      tuple、dict的拆包
  a = [1,2,3] ka = {&amp;#39;name&amp;#39;:aa, &amp;#39;age&amp;#39;:18} # 拆包 func(*a) # 这样，func的args就是a了，有3个参数，而不是一个list参数。   *list
  **dict
    类和对象  类的三要素：  类名：大驼峰命名 属性： 方法：（函数   类是对象的模板。  把飞机图纸当成类，可以造出各种各样的飞机。（红黄蓝绿）   dir内置函数  查看对象所有可用的方法   数据、变量、函数在python中都是对象  </content>
    </entry>
    
     <entry>
        <title>Intro2python_part1</title>
        <url>/post/2021/07/intro2python_part1/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>python</tag>
        </tags>
        <content type="html"> 内核 和 发行版 发行版： centOS, ubuntu redhat
内核只有一个。发行版是基于内核开发的包括图形化界面以及一些运用软件的软件。
终端命令 命令行放大缩小 放大：cmd&#43;shift&#43;&#43;
缩小：cmd &#43; &#39;-&#39;
常见命令 查阅指令  command —help man command  manual    ls ls -a # 所有的文件，包括隐藏文件 ls -hl # 显示mod和大小。 h表示human,大小按照Byte, M, G来显示。 通配符 cat and more grep 搜索 echo 重定向输出 echo hello python &amp;gt; a #创建a，输入hello python 管道| 过滤执行的输出
ssh 配置别名 配置免密登录 ssh-keygen #一路enter就行 ssh-copy-id user@addr 注意点：vscode的连接 先手动连接一下，按F1。选择如下：
Remote-SSH: Connect to Host 用户管理 用户信息查看 修改附加组 usermod -G sudo zhangsan which 查看位置 bin &amp;amp; sbin 修改文件权限 系统信息相关命令 process status 指定参数不带 -
find  grep 是用来搜文本中的内容 find 是用来搜文件  软链接 大白话：win下面的快捷方式
习惯：使用绝对路径
打包 注意：tar只负责打包，不负责压缩！！！
操作：
压缩/解压  gzip   bzip2   apt安装管理  advanced packaging tool  </content>
    </entry>
    
     <entry>
        <title>A First Course in Probability - part 2</title>
        <url>/post/2021/05/a_first_course_in_probability_9th_2/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>math</tag><tag>probability</tag>
        </tags>
        <content type="html"> 前言 ch4 ch5 Ch4~5小结 </content>
    </entry>
    
     <entry>
        <title>A First Course in Probability - part 1</title>
        <url>/post/2021/04/a_first_course_in_probability_9th_1/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>math</tag><tag>probability</tag>
        </tags>
        <content type="html"> 前言 由于对于概率论的基础存在需求，这里重新回顾一下之前所学的概率论。使用《概率论基础教程》一书，这里记录一下阅读笔记和一些个人的思考。
part 1 记录前三章的内容。
Combinatorial Analysis The basic principle of counting Suppose that two experiments are to be performed. Then if experiment 1 can result in any one of m possible outcomes and if, for each outcome of experiment 1, there are n possible outcomes of experiment 2, then together there are mn possible outcomes of the two experiments.
需要注意的是，这里要求实验1的每个结果都需有n个实验2的结果。
这里可以把两个实验推广到$r$个实验。
Permutations   给$n$个distinguishable的物体进行排序，一共有 $n!$ (read as “n factorial”)种结果。
  对于 certain of the objects are indistinguishable 的情况，需要除掉在各自类内排序的数目。
 例子：     Combinations 组合：把$n$个objects划分成$r$组。组合对于每个组内的object不计较顺序。
 例子：从 abcde中取出3个。   组合中的公式 The binomial theorem 这个可以用1. 数值法来证明。2. 使用组合法来证明：从n个(x&#43;y)中取出k个x已经n-k个y。
Multinomial Coefficients 将n个objects分成r组，这r组所有元素数目之和是n。这个与组合数的区别在于，组合数是从n个objects中抽出部分objects，而多项式系数则是对n个objects进行划分。
这个记做：
例子：
 第一类例子   这两个例子分成的组都是distinguishable。     第二类例子   这个例子中，分的两个组是indistinguishable，因此需要除以这两个组的排列数。      一个很有意思的例子：
对于第二问，可以把问题转成，n个位置的下标表示各自的排名。现在给n个人安排排名，那么有$n!$种结果。
The Number of Integer Solutions of Equations 正整数方程解。对于方程$x_1&#43;x_2&#43;…&#43;x_r = n$，这里$ x_i &amp;gt;0$可以看作有n个objects，在n个objects之间(n-1)个位置插入板子，把n个objects分成r组。那么就是在(n-1)个位置中，选择(r-1)个位置来插入板子。如图：
例子：
- 问题：![image-20210501123250586](A_First_Course_in_Probability_9th_1.assets/image-20210501123250586.png) - 这个例子的第一问，里面$x_i \geq 0$，而上面的公式是要求 $x_i &amp;gt;0$即正数，那么我们可以使用换元法，把$x_i$转换成正整数。 - 对于第二问，可以无中生有，构造成 $x_5$用来表示没有被投资的资金。  Summary  The basic principle of counting  对于每个实验一的结果，在实验二中都有相同的实验结果数目。   排列  区分 distinguishable 和 indistinguishable   组合  从 n 个 objects 中取出 r 个   多项式系数  区别于 组合数， 是把n个 objects 划分为 r 组   正整数方程解的数目  挡板法 自然数或者负数转正整数    Axioms of Probability Sample Space and Events 事件：Sample Space 中符合某些性质的元素构成的子集。
  某个事件的概率，理解起来就是随机抽，抽出的结果符合xx性质占所有可能的比例有多大。
  在子集定义的基础上，自然而然的可以做事件的交集和并集。
  运算：符合代数中的集合运算。
- 交换律 - 结合律 - 分配律  DeMrogan&amp;rsquo;s Laws
Axioms of Probability 频率派：事件发生频率的极限
我们认为频率趋于某个常数极限值，这个作为假设的话非常的复杂。
采用现代概率论公理化方法，先假设一些更简单的关于概率的公理，然后去证明频率在某种意义下趋于一个常数极限值是更为合理的操作。
概率的三个公理 inclusion–exclusion identity：容斥恒等式
等可能结果的样本空间 在很多试验中， 一个很自然的假设是，样本空间中的所有结果发生的可能性都是一样的。
换言之，如果假定一次试验的所有结果都是等可能发生的，那么任何事件 E发生的概率等于 E 中所含有的结果数占样本空间中的所有结果数的比例。
一个值得思考的例题 配对问题 使用容斥恒等式
例如，欧拉装信封问题。
Summary P(A)可以理解为长期相对频率或者确信程度的度量。
其它的部分感觉都不会太令人困惑。
Conditional Probability and Independence 条件概率定义 E occurs given that F has occurred: $P(E|F)$
sample space 从原来的 S 缩减成 F。
乘法规则 贝叶斯公式&amp;amp;全概率公式  例子  在第二部分的例子中，可以看成，【在发生事故的样本空间中，容易出事故的贡献占比多少】。
一个用贝叶斯解释性很好的例子 关于贝叶斯中先验与后验的关系 优势比 一个我觉得从不同角度理解有不同结论的例子 这里是计算在给定R之后，RB的概率。
贝叶斯公式中： $$ P(F_j|E) = \frac{P(EF_j)}{P(E)}=\frac{P(E|F_j)P(E)}{\sum_{i=1}^{n}P(E|F_i)P(E)} $$ 其中，$P(E|F_j)$表示类条件概率。
是1/3而不是1/2的关键在于这里的类条件概率。
现在知道的证据是一个面为R，我之前理所当然的认为在已知一个面是R，剩下就两种可能，不是R就是B，就是在两张牌RR和RB中二选一。但是，这里犯下一个很基本的错误，即RR与RB在给定R这个条件之后，出现的概率不再是简单的等概率事件了！在没有给定R之前，三张牌是等概率的1/3。在给定R之后，RR与RB出现的概率是需要乘上类条件概率。
独立事件 互相独立 $$ P(EF) = P(E)P(F) $$
序贯地补充信息 Summary 贝叶斯公式&amp;amp;全概率公式。
贝叶斯公式就是证据对于先验的修正。后验概率通过【先验&#43;类条件概率】来修正。
事件之间独立的概念。我觉得这是一个数学上的定义，两个事件不搭噶，那么肯定是独立的。但是独立，并不表示两个事件不搭噶（毫无关系）。
Ch1~3小结 前三章先是讨论了数数、概率论的基础公理、条件概率中的贝叶斯与独立性等等。
这里的组合分析，把高中数学与大学期间学习的组合数学回忆了一下，这里的数数逻辑是比较清晰的，区分 distinguishable or not！全排列、组合、隔板法计算正整数方程解数目得等等。
公理一章的话，明确了样本空间的概念以及日常用来讨论的简单模型一般是【等可能的样本空间】。
条件概率的话，是相当于从原来的样本空间取出子集来进一步考虑。贝叶斯公式中，先验是在整个样本空间，类条件概率是在取出的子集中占的比例，最后计算后验的话，也是计算在整个样本空间占的比重。
</content>
    </entry>
    
     <entry>
        <title>理解pytorch算子的使用</title>
        <url>/post/2021/04/%E7%90%86%E8%A7%A3pytorch%E7%AE%97%E5%AD%90%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>pytorch</tag>
        </tags>
        <content type="html"> torch.gather 官方文档
API接口：torch.gather(input, dim, index, *, sparse_grad=False, out=None) → Tensor
按照index，在dim维度中取出 input的值到out上。这里out的shape和index的shape是一模一样。
这里用out的下标来表示结果，如下：
out[i][j][k] = input[index[i][j][k]][j][k] # if dim == 0 out[i][j][k] = input[i][index[i][j][k]][k] # if dim == 1 out[i][j][k] = input[i][j][index[i][j][k]] # if dim == 2 如果是 dim=0的情况下，对于当前的out[i][j][k]的值就是就把input[i][j][k]的索引i换成 index[i][j][k]，即就是input[index[i][j][k]][j][k]。
这里举个例子：
&amp;gt;&amp;gt;&amp;gt; a tensor([[-0.1698, 0.2747, 0.4355], [ 0.9775, 0.4312, -0.4442], [ 0.1158, -1.3496, 0.0075], [-0.2946, -1.1240, 0.6257], [-1.9685, -0.0421, -0.7570]]) &amp;gt;&amp;gt;&amp;gt; a.shape torch.Size([5, 3]) # 注意，out的shape与index的shape是一模一样。 # 1. 如果想要从 a 的列中取出一个值，那么dim=0。 # 1.1 每一列一个 &amp;gt;&amp;gt;&amp;gt; b tensor([[4, 2, 3]]) &amp;gt;&amp;gt;&amp;gt; b.shape torch.Size([1, 3]) # 这个时候使用gather，会改变行标。 &amp;gt;&amp;gt;&amp;gt; torch.gather(a, 0, b) tensor([[-1.9685, -1.1240, 0.0075]]) # 可以看到，这里只改变dim=0的下标，换句话说，就是保持其他坐标，从对应的dim=0里面来选。 # 1.2 每一列多个 &amp;gt;&amp;gt;&amp;gt; b tensor([[4, 4], [3, 3], [2, 2], [1, 1], [0, 0]]) &amp;gt;&amp;gt;&amp;gt; b.shape torch.Size([5, 2]) # 改变行标。 注意，index的列数目【小于、等于】src的列数。 index的行数可以【大于、等于、小于】src的列数 &amp;gt;&amp;gt;&amp;gt; torch.gather(a, 0, b) tensor([[-1.9685, -0.0421], [-0.2946, -1.1240], [ 0.1158, -1.3496], [ 0.9775, 0.4312], [-0.1698, 0.2747]]) # 2. 如果想要把 a 按照行来取值，那么dim=1。 # dim=1就和dim=0非常类似。 # 这边举一个 ”每一行取出多个“的例子 &amp;gt;&amp;gt;&amp;gt; c tensor([[1, 2], [2, 1], [2, 0]]) &amp;gt;&amp;gt;&amp;gt; c.shape torch.Size([3, 2]) &amp;gt;&amp;gt;&amp;gt; torch.gather(a, 1, c) tensor([[ 0.2747, 0.4355], [-0.4442, 0.4312], [ 0.0075, 0.1158]]) torch.scatter_ 官方文档
API接口：torch.Tensor.scatter_(dim, index, src, reduce=None) → Tensor
将src的值，根据index和dim写到self变量上。这里会遍历src的每个值，将src的每个值都分配到self上。对于self的变化情况如下：
self[index[i][j][k]][j][k] = src[i][j][k] # if dim == 0 self[i][index[i][j][k]][k] = src[i][j][k] # if dim == 1 self[i][j][index[i][j][k]] = src[i][j][k] # if dim == 2 与torch.gather非常的类似。
举个例子：【Pytorch】scatter函数详解
&amp;gt;&amp;gt;&amp;gt; a tensor([[0., 1., 2., 3., 4.], [5., 6., 7., 8., 9.]]) &amp;gt;&amp;gt;&amp;gt; a.shape torch.Size([2, 5]) &amp;gt;&amp;gt;&amp;gt; b tensor([[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]]) &amp;gt;&amp;gt;&amp;gt; b.shape torch.Size([3, 5]) &amp;gt;&amp;gt;&amp;gt; index tensor([[1, 2, 1, 1, 2], [2, 0, 2, 1, 0]]) &amp;gt;&amp;gt;&amp;gt; index.shape torch.Size([2, 5]) # 所有的改变都是在self身上。现在我们对b进行scatter_， # 那么就是将src=a的每个值，都按照index和dim，分配到self=b的身上。 &amp;gt;&amp;gt;&amp;gt; b.scatter_(dim=0, index=index, src=a) tensor([[0., 6., 0., 0., 9.], [0., 0., 2., 8., 0.], [5., 1., 7., 0., 4.]]) # 解释： # 对于src[0][0]，会被分配到 self[index[0][0]][0] 即 self[1][0] # 对于src[1][0]，会被分配到 self[index[1][0]][0] 即 self[2][0] # 对于src[0][1]，会被分配到 self[index[0][1]][1] 即 self[2][1]	 # dim代表的含义就是当前的src[i][j]被分配到所指定的dim中第index的位置。 </content>
    </entry>
    
     <entry>
        <title>Convolutional Occupancy Networks </title>
        <url>/post/2021/04/convolutional_occupancy_networks/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>implicit field</tag><tag>convolution</tag>
        </tags>
        <content type="html"> 相关信息 Title: Convolutional Occupancy Networks
Link: https://arxiv.org/abs/2003.04618
Github Link: https://github.com/autonomousvision/convolutional_occupancy_networks
收录于 ECCV20
Motivation 这篇文章是在他们组之前工作 Occupancy Networks: Learning 3D Reconstruction in Function Space 的基础上加入卷积操作的升级版。
之前的一些在隐势场上的工作如： IM-Net, OccNet等等，在细节上的效果不是非常的理想。ConvOccNet这篇文章的作者认为主要的原因是他们都用全连接（fully-conneted layer）来训练网络，无法有效的获取空间（也可以认为是local 相对于 global 的特征）。
例如，Fig.1中的(a)，对于每个 query point而言，输入的特征都是通过 全连接层得到的，全连接层无法像卷积那样有效的包含local information。Fig.1中的(b)，3D Feature Volume是通过3D卷积得到的，这个卷积的过程中可以有效的包含local information。
同时，作者还说了，之前的那些基于全连接层的隐势场工作没办法在场景重建上work，这同样是由于缺少了卷积操作从而导致local information的缺失。使用ConvOccNet是可以重建出细节保存比较好的模型。
补充一点在看这篇paper related work时候注意到的点：
Notable exceptions are PIFu and DISN which use pixel-aligned implicit representations to reconstruct people in clothing or ShapeNet objects.
这两篇用隐势场搞 SVR 的工作都关注到了局部细节上重建。
Methods Encoders 文章提供了基于 3种投影方法与2种输入（一共6种）Encoder。
输入类型 支持两种类型的输入：点云（3k for single object 或者 10k for scene）和 体素($64^3$或者$32^3$)。
对于点云，使用 浅层的PointNet来提取特征。
对于体素，使用 3d 卷积提取特征。
投影方法 这块地方我觉得是整篇文章的重点。
这里以点云的输入为例子，参考图二：
 one plane  Fig2(a). 将每个点的特征（通过PointNet得到）投影到 ground plane上。 对于ground plane上的每个点最后的feature是在 【以这个点为中心，和四周的四个点的中点连线形成的正方形区域(fig2(a)地面的红框)内所有点的 average pooling】。 得到 $H\times W\times d$   three plane  与 one plane 类似，就是需要投影到 xy, yz, zx 三个平面上。 得到 3个 $H\times W\times d$   volume  不需要投影，只需要将同一个voxel cell 中feature 进行 average pooling。 $H\times W\times D\times d$    Decoders 这里就用到了卷积。对于 one plane ，将 这个plane的上的特征 $H\times W\times d$ 使用一次基于 hourglass结构的Unet。我是觉得，其实 PointNet是可以获取 local 与 global 之间的关系，这里用 卷积，是将局部的一小撮点云之间的联系加深，在同一个局部的特征会被加强体现出来（通过Unet的卷积）。
对于 three plane，操作是与 one plane 类似的，然后这3个Unet是共享参数的。对于 volume的话，就是使用 3d unet。
在进行卷积操作以后，后面的步骤其实与 OccNet 是类似的。搞一个MLP，把 query point在上面算出来的特征与query point 作为输入，把这个 query point 是否 occupancy的概率作为输出。 $$ f_{\theta}(P, \psi(P, x)) \rightarrow [0, 1] $$
$x$是输入的点云提取的特征，$P$是query point。
Training and Inference loss的话比较简单，就是将预测出来的2048个query point的occupancy值和gt计算交叉熵。
在训练好隐势场之后，为了获取 mesh，用了和 OccNet 一样的算法， MISE(对Marching Cube进行改进，加速mesh的生成速度和质量)。
Experiments 在 单个object，scene 上对模型进行测试。
我从作者的实验结果上感觉，对于single object以点云作为输入的情况下， three plane 和 volume的形式重建出来的效果比较好。
对于体素输入的话，one plane的效果是坏掉了。
scene level 作者在文章中特别提到：
While high-resolution canonical plane features capture fine details they are prone to noise. Low-resolution volumetric features are instead more robust to noise, yet produce smoother surfaces
然后他就在场景的重建中【把 plane 和 volume 两种方法互补起来作为一种方法】，在ablation study中一起做比较。
需要注意的点  The increase in plane resolution for the single plane variant does not result in a clear performance boost, demonstrating that higher resolution does not necessarily guarantee better performance.  不一定越高越好，可能 plane 的精度以后用的时候就卡在 64 或者 128 。   The plane-based approaches are more affected by the domain shift。  从Table 5看的。 We find that 3D CNNs are more robust to noise as they aggregate features from all neighbors which results in smooth outputs.    Ending 因为最近可能要用到这个工作，就重新把它拿出来再看了一遍，暂时还没有过一遍代码，理解的并不是非常深入。
</content>
    </entry>
    
     <entry>
        <title>GLOW</title>
        <url>/post/2021/04/glow/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>flow</tag><tag>generative model</tag>
        </tags>
        <content type="html"> 背景知识 判别模型 vs 生成模型
数值计算 &amp;amp; 采样计算 见过最直观的关于vae的解释变分自编码器介绍、推导及实现
苏剑林
content 知乎real-NVP 里面的【RealNVP中的多尺度结构图示】是讲解的真清楚。
以下是苏剑林关于 actnorm的评价
所以，这一点是需要批评的，纯粹将旧概念换了个新名字罢了。当然，批评的是 OpenAI 在 Glow 中乱造新概念，而不是这个层的效果。缩放平移的加入，确实有助于更好地训练模型。而且，由于 Actnorm 的存在，仿射耦合层的尺度变换已经显得不那么重要了。 我们看到，相比于加性耦合层，仿射耦合层多了一个尺度变换层，从而计算量翻了一倍。但事实上相比加性耦合，仿射耦合效果的提升并不高（尤其是加入了 Actnorm 后），所以要训练大型的模型，为了节省资源，一般都只用加性耦合，比如 Glow 训练 256x256 的高清人脸生成模型，就只用到了加性耦合。 小结论：使用actnorm之后，可以在耦合层中只使用加性耦合。
随手先记录一下，等待后续更新。
Log-likelihood-based methods:
- VAE - FLOW - AUTO-REGRESSIVE  $\log p_G(x_i) = \log \pi(G^{-1}(x_i)) &#43; \log|\det(J_{G^{-1}})|$
最大似然目标： $$ p_K (x^i) = \pi(z^i)(|\det (J_{G_1^{-1}})|)&amp;hellip;(|\det (J_{G_k^{-1}})|) $$
取对数之后： $$ \log p_K (x^i) = \log \pi(z^i) &#43; \sum_{h=1}^K \log (|\det (J_{G_h^{-1}})|) $$ 要使得 $x^i$的出现概率最大，就得保证$z^i$ 在Gaussian中最大，这会导致$z^i$全部趋近于0。
但是后面的求和会限制$z^i$全部趋近于0。
详细的参考来自于李宏毅机器学习2019(国语)，讲解的非常清晰。
【学习笔记】生成模型——流模型（Flow）
</content>
    </entry>
    
     <entry>
        <title>Hugo 搭建个人博客 —- My first post</title>
        <url>/post/my_first_post/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>blog</tag>
        </tags>
        <content type="html"> hugo install 使用brew进行安装。
环境：MacOS,Big Sur
brew install hugo hugo version # 安装正确的话，可以正常查看 Themes 在安装好hugo之后，进入hugo官方主题模板选择心仪的模板。这里我选择了erblog.
为blog创建一个文件夹： xxx-blog（名字随意）。
cd xxx-blog mkdir themes git clone https://github.com/ertuil/erblog themes/erblog cp themes/erblog/exampleSite/config.toml .	#使用模板自带的配置文件替换默认配置文件 对config.toml进行编辑
DefaultContentLanguage = &amp;#34;zh-cn&amp;#34; # 修改为中文 请到Erblog 的Configuration中查看更多的参数设置。
e.g. author, bio,
创建blog cd xxx-blog hugo new post/my-first-post.md 在此基础上编辑新建的文章，添加内容并保存。
加入 tag 标签 在标头加入：
tags: blog 公式的显示 为了加速渲染，只在每篇文章的标头加
math: true 如果为了方便，可以在config文件中加
math=true 显示的效果 这是行内公式$12_{ab}^{12bv}$行内公式。
这是行间公式 $$ abc_{123}^{abv_{ab}} $$ 这是特殊符号测试：!@#%^&amp;amp;*()_&#43;${ } () 你好[(hhh)]123 \(123\)hhhhh
做法 参考MathJax渲染数学公式，这篇blog中在主题文件夹（\themes\xxxxx\layouts\partials\footer.html）中，在&amp;quot;&amp;lt;footer&amp;gt;&amp;ldquo;中添加下面代码。
&amp;lt;script type=&amp;#34;text/x-mathjax-config&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;], [&amp;#39;\[&amp;#39;,&amp;#39;\]&amp;#39;]], processEscapes: true, processEnvironments: true, skipTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], TeX: { equationNumbers: { autoNumber: &amp;#34;AMS&amp;#34; }, extensions: [&amp;#34;AMSmath.js&amp;#34;, &amp;#34;AMSsymbols.js&amp;#34;] } } }); &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; async src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 但是上面这种做法会导致“[”和“]”被识别为公式而无法输出。因此，这里选择了比较不常见的组合来代替，代码如下：
&amp;lt;script type=&amp;#34;text/x-mathjax-config&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;~&#43;(&amp;#39;,&amp;#39;~&#43;)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;], [&amp;#39;~&#43;[&amp;#39;,&amp;#39;~&#43;]&amp;#39;]], processEscapes: true, processEnvironments: true, skipTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], TeX: { equationNumbers: { autoNumber: &amp;#34;AMS&amp;#34; }, extensions: [&amp;#34;AMSmath.js&amp;#34;, &amp;#34;AMSsymbols.js&amp;#34;] } } }); &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; async src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 图片的显示 显示效果 测试图片1
测试图片2
做法 由于我在 typora中图片存储的路径是”./${filename}.assets“，这是一个相对路径。hugo将md文件翻译成html文件的时候，不会改变这个路径，但是html文件与”./${filename}.assets“在public文件中不再是在同一个目录下了，这个时候html文件中的相对路径需要添加&amp;rdquo;../&amp;ldquo;的前缀。因此，需要在写一个与处理公式类似的脚本。在主题文件夹（\themes\erblog\layouts\partials\footer.html）中，在&amp;rdquo;&amp;lt;footer&amp;gt;&amp;ldquo;中添加下面代码，遍历所有的image，给src属性添加&amp;rdquo;../&amp;ldquo;前缀。由于对Javascript不熟悉，参考了用getElementsByTagName遍历HTML DOM元素 这篇博客以及JS怎么更换img中src路径的内容来遍历所有image。
&amp;lt;script&amp;gt; var local_imgs=document.getElementsByTagName(&amp;#39;img&amp;#39;); for (var i = 0; i &amp;lt; local_imgs.length; i&#43;&#43;) { var src = local_imgs[i].getAttribute(&amp;#39;src&amp;#39;); local_imgs[i].setAttribute(&amp;#39;src&amp;#39;,&amp;#34;../&amp;#34;&#43;src); } &amp;lt;/script&amp;gt; 这么做还有一个好处，那就是当我把md文件移动到另一个文件夹，我只需要将对应的”./${filename}.assets“移动到和md一级的目录，本地的md能够正常显示，同时翻译后的html文件也能正常显示。
生成以及上传 生成 在xxx-blog目录下，先使用hugo进行编译，
hugo 此时xxx-blog目录下会多出一个 public 文件夹来。这便是 Hugo 生成的网站。
hugo server -D # 在本地查看 部署到github.io 如果是第一次执行，需要
cd public git init git remote add origin https://github.com/[Github 用户名]/[Github 用户名].github.io.git git add . git commit -m &amp;#34;[介绍，随便写点什么，比如日期]&amp;#34; git push -u origin master 如果不是第一次执行，如下：
git add . git commit -m &amp;#34;[介绍，随便写点什么，比如日期]&amp;#34; git push -u origin master Ending 至此，使用 hugo 搭建部署在 github.io的个人博客的流程介绍完毕。
第一次写blog，对这个搭建过程进行记录并且以此练练手。
Reference  MathJax渲染数学公式 git修改/添加/删除远程仓库 用getElementsByTagName遍历HTML DOM元素 JS怎么更换img中src路径 用hugo搭建属于自己的个人博客(mac环境) 如何利用 GitHub Pages 和 Hugo 轻松搭建个人博客？  更新 由于觉得之前的主题功能不够，使用了 hexo的 Next的主题。这里用了xtfly的hugo-theme-next 主题。
mkdir themes git clone https://github.com/xtfly/hugo-theme-next themes/next cp themes/next/config.toml .	#使用模板自带的配置文件替换默认配置文件 之后进入config.toml根据自己的需求修改个人信息。
有一些图片和公式的不兼容，执行了与之前类似的操作，如下：
每篇blog的时间显示在我这里是错误的，于是我在config.toml把时间的几个format注释掉了，然后就正常了。
修改公式和图片显示 由于多了一张存放在static文件下的的 author.jpg，这导致之前的js脚本会把这张图的相对路径也加上../，从而出现这张图无法正确加载。我在看了html的源码后发现，author.jpg一直都是最后一张图，于是遍历的时候改成i &amp;lt; local_imgs.length-1即可。整&amp;lt;footer.html&amp;gt;的修改就是在路径（\themes\xxxxx\layouts\partials\footer.html）添加如下代码：
&amp;lt;script type=&amp;#34;text/x-mathjax-config&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;~&#43;(&amp;#39;,&amp;#39;~&#43;)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;], [&amp;#39;~&#43;[&amp;#39;,&amp;#39;~&#43;]&amp;#39;]], processEscapes: true, processEnvironments: true, skipTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], TeX: { equationNumbers: { autoNumber: &amp;#34;AMS&amp;#34; }, extensions: [&amp;#34;AMSmath.js&amp;#34;, &amp;#34;AMSsymbols.js&amp;#34;] } } }); &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; async src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var local_imgs=document.getElementsByTagName(&amp;#39;img&amp;#39;); for (var i = 0; i &amp;lt; local_imgs.length-1; i&#43;&#43;) { var src = local_imgs[i].getAttribute(&amp;#39;src&amp;#39;); local_imgs[i].setAttribute(&amp;#39;src&amp;#39;,&amp;#34;../&amp;#34;&#43;src); } &amp;lt;/script&amp;gt; 增加新功能  评论 访问统计 搜索  评论 使用 Valine平台。参考Valine的官方指导手册，先进行实名注册（包括支付宝认证与邮箱认证还需要绑定手机，感觉贼麻烦），然后创建方案（参考教程）。
记住 App ID 和 App Key。在hugo中安装 valine，如下：
# Install valine npm install valine --save 参考Hugo加入评论的功能来配置Hugo下的valine设置。
 在 config.toml 中最底部加入以下代码（Valine基本配置）：  # Valine. # You can get your appid and appkey from https://leancloud.cn # more info please open https://valine.js.org [params.valine] enable = true appId = &amp;#39;Your appId&amp;#39; appKey = &amp;#39;Your appKey&amp;#39; notify = false # mail notifier , https://github.com/xCss/Valine/wiki verify = false # Verification code avatar = &amp;#39;mm&amp;#39; placeholder = &amp;#39;说点什么吧...&amp;#39; visitor = true 在 layouts/partials/ 中创建 comments.html 文件，文件内容如下：  &amp;lt;!-- valine --&amp;gt; {{- if .Site.Params.valine.enable -}} &amp;lt;!-- id 将作为查询条件 --&amp;gt; &amp;lt;div id=&amp;#34;vcomments&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;//cdn1.lncld.net/static/js/3.0.4/av-min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#39;//unpkg.com/valine/dist/Valine.min.js&amp;#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; new Valine({ el: &amp;#39;#vcomments&amp;#39; , appId: &amp;#39;{{ .Site.Params.valine.appId }}&amp;#39;, appKey: &amp;#39;{{ .Site.Params.valine.appKey }}&amp;#39;, notify: &amp;#39;{{ .Site.Params.valine.notify }}&amp;#39;, verify: &amp;#39;{{ .Site.Params.valine.verify }}&amp;#39;, avatar:&amp;#39;{{ .Site.Params.valine.avatar }}&amp;#39;, placeholder: &amp;#39;{{ .Site.Params.valine.placeholder }}&amp;#39;, visitor: &amp;#39;{{ .Site.Params.valine.visitor }}&amp;#39; }); &amp;lt;/script&amp;gt; {{- end -}} 引入comments  在 layouts/_default/single.html 中加入下面的代码，以引入 comments.html
&amp;lt;div class=&amp;#34;post-comment&amp;#34;&amp;gt; &amp;lt;!-- 加入评论功能 --&amp;gt; {{ partial &amp;#34;comments.html&amp;#34; . }} &amp;lt;/div&amp;gt; 然后重新启动hugo即可看到评论，评论的管理后台在 valine。
访问统计  评论数目  在themes/next/layouts/partials/head.html文件中引入不蒜子js文件
&amp;lt;!-- 不蒜子 --&amp;gt; &amp;lt;script async src=&amp;#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 创建文件：themes/next/layouts/partials/post/viewnum.html
&amp;amp;nbsp; | &amp;amp;nbsp; &amp;lt;span class=&amp;#34;article-tag&amp;#34;&amp;gt; &amp;lt;i class=&amp;#34;fa fa-eye&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_container_page_pv&amp;#34;&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_value_page_pv&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; 在 themes/next/layouts/_default/single.html中添加这个viewnum.html文件
&amp;lt;div class=&amp;#34;post-meta&amp;#34;&amp;gt; {{ partial &amp;#34;post/date.html&amp;#34; .}} {{ partial &amp;#34;post/category.html&amp;#34; .}} {{ partial &amp;#34;post/readtime.html&amp;#34; .}} {{ partial &amp;#34;post/viewnum.html&amp;#34; .}} &amp;lt;/div&amp;gt; 就可以在文章里面看到一个小眼睛了。
 站点统计  在 themes/next/layouts/partials/footer.html中的第一个**&amp;lt;div&amp;gt;**添加如下代码：
&amp;lt;span class=&amp;#34;with-love&amp;#34;&amp;gt;&amp;lt;i class=&amp;#34;fa fa-heart&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_container_site_pv&amp;#34;&amp;gt; 总访问量：&amp;lt;span id=&amp;#34;busuanzi_value_site_pv&amp;#34;&amp;gt;&amp;lt;span id=&amp;#34;busuanzi_value_site_pv&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;with-love&amp;#34;&amp;gt;&amp;lt;i class=&amp;#34;fa fa-heart&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span id=&amp;#34;busuanzi_container_site_uv&amp;#34;&amp;gt; 总访客数: &amp;lt;span id=&amp;#34;busuanzi_value_site_uv&amp;#34;&amp;gt;&amp;lt;span id=&amp;#34;busuanzi_value_site_uv&amp;#34;&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt; 效果如下：
为了解决错误的统计量，需要添加如下一行代码：
&amp;lt;meta name=&amp;#34;referrer&amp;#34; content=&amp;#34;no-referrer-when-downgrade&amp;#34;&amp;gt; 在之前themes/next/layouts/partials/head.html中
&amp;lt;!-- 不蒜子 --&amp;gt; &amp;lt;script async src=&amp;#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;meta name=&amp;#34;referrer&amp;#34; content=&amp;#34;no-referrer-when-downgrade&amp;#34;&amp;gt; 搜索 这个魔改的 next主题自带了 local search，不过我试了一下，中文的话得要2个字起步好像。
补一句：至于 hexo中的search，可以参考下面的链接。
New Reference 优化Hugo Next主题的过程
Hugo加入评论的功能
女朋友看了我的博客，说太LOW了，于是我搞了一天~
人人都爱小雀斑&amp;rsquo;s blog
</content>
    </entry>
    
</search>